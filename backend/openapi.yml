openapi: "3.0.0"
info:
  version: "1"
  title: ""
  description: ""
paths:
  /me:
    get:
      operationId: me
      tags:
        - Authentication
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /login:
    post:
      operationId: login
      tags:
        - Authentication
      security: [] # no auth needed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Logged in succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenData"
        404:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /logout:
    post:
      operationId: logout
      tags:
        - Authentication
      responses:
        200:
          description: succesful current user's Logout
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /users:
    get:
      operationId: "getUsers"
      tags:
        - Users
      description: ""
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: "Get list of users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /user:
    post:
      operationId: "createUser"
      description: ""
      tags:
        - Users
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /user/{userId}/player:
    post:
      operationId: createPlayer
      description: Create a player from user
      tags:
        - Team
      parameters:
        - in: "path"
          name: "userId"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
      responses:
        200:
          description: "successful"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "User or team does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"

  /teams:
    get:
      operationId: "getTeams"
      description: "get list of teams"
      tags:
        - Teams
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Team"
  /teams/count:
    get:
      operationId: countTeams
      description: count the number of teams
      tags:
        - Teams
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
  /team:
    post:
      operationId: "createTeam"
      description: "create a team"
      tags:
        - Team
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /team/{id}:
    delete:
      operationId: "removeTeam"
      description: ""
      tags:
        - Team
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
    get:
      operationId: "getTeam"
      description: "get a team info"
      tags:
        - Team
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        404:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
    patch:
      operationId: "updateTeam"
      description: "Update a team"
      tags:
        - Team
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /team/{teamId}/players:
    get:
      operationId: getTeamPlayers
      description: "Get list of player"
      tags:
        - Teams
      parameters:
        - in: "path"
          name: "teamId"
          required: true
          schema:
            type: "string"
        - in: "query"
          name: "count"
          schema:
            type: "integer"
        - in: "query"
          name: "page"
          schema:
            type: "integer"
      responses:
        200:
          description: "list of player about current team"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Player"
        404:
          description: "not found team"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /team/{teamId}/player/{userId}:
    post:
      operationId: putUserToTeam
      description: "Set a player to the team"
      tags:
        - Teams
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        404:
          description: "team or user are not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: boolean
  /user/{id}:
    delete:
      operationId: "removeUser"
      description: ""
      tags:
        - Users
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"

      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "boolean"
        404:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
    patch:
      operationId: "updateUser"
      description: ""
      tags:
        - Users
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /users/{id}:
    get:
      operationId: "getUser"
      description: ""
      tags:
        - Users
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
        404:
          description: "Not found user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /areas:
    get:
      operationId: "getAreaList"
      description: "get list of areas"
      tags:
        - Area
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"
    post:
      description: "create an area"
      operationId: createArea
      tags:
        - Area
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AreaWithoutId"
      responses:
        200:
          description: "successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Area"
        500:
          description: "Error during creation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /areas/count:
    get:
      operationId: countAllAreas
      description: count the number of address
      tags:
        - Area
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"

  /areas/{id}:
    get:
      description: "Get an area"
      operationId: getArea
      tags:
        - Area
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Area"
        404:
          description: "Not found area"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"

    delete:
      description: "delete an area"
      operationId: deleteArea
      tags:
        - Area
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
    patch:
      description: "update an area"
      operationId: updateArea
      tags:
        - Area
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AreaWithoutId"
      responses:
        200:
          description: "successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Area"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
        500:
          description: "Error during creation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /games:
    get:
      description: "get list of match"
      operationId: getGames
      tags:
        - Games
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
  /games/count:
    get:
      operationId: countAllGames
      description: count the number of games
      tags:
        - Games
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Count"
  /team/{teamId}/games:
    get:
      description: "get list of match about current team"
      operationId: getTeamGames
      tags:
        - Games
        - Team
      parameters:
        - in: "path"
          name: "teamId"
          required: true
          schema:
            type: "string"
        - in: query
          name: page
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        404:
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /game:
    post:
      description: "Create a game"
      operationId: createMatch
      tags:
        - Games
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Game"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
  /game/{id}:
    patch:
      description: "Create a game"
      operationId: updateMatch
      tags:
        - Games
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Game"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        404:
          description: "Not found game"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
    delete:
      description: "Delete a game"
      operationId: removeGame
      tags:
        - Games
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: ""
        404:
          description: "Not found game"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorOutput"

security:
  - jwtAuth: []
components:
  securitySchemes:
    jwtAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    Count:
      type: integer
      nullable: false
    uuid:
      type: string
      description: The unique ID
      example: abcdef
      format: uuid
    AreaWithoutId:
      properties:
        name:
          type: string
          nullable: false
        address:
          type: string
          nullable: false
          format: streetName
          minLength: 1
        city:
          type: string
          nullable: false
          format: city
          minLength: 1
        longitude:
          type: number
          format: float
          nullable: false
        latitude:
          type: number
          nullable: false
          format: float
      required:
        - _id
        - address
        - city
        - longitude
        - latitude
    Area:
      allOf:
        - $ref: "#/components/schemas/AreaWithoutId"
        - type: object
          required:
            - _id
          properties:
            _id:
              type: string
              format: uuid

    Login:
      properties:
        email:
          nullable: false
          type: string
          format: email
        password:
          nullable: false
          type: string
      required:
        - email
        - password
    User:
      properties:
        lastname:
          nullable: false
          type: string
          minLength: 1
        firstname:
          nullable: false
          type: string
          format: firstName
          minLength: 1
        email:
          nullable: false
          type: string
          format: email
        _id:
          type: string
          format: uuid
        role:
          nullable: true
          type: array
          items:
            type: string
        createdAt:
          nullable: false
          type: number
          format: date-time
        password:
          nullable: false
          type: string
      required:
        - _id
        - email
        - lastname
        - firstname
    UserWithoutPassword:
      properties:
        lastname:
          nullable: false
          type: "string"
          format: lastName
        firstname:
          nullable: false
          type: "string"
          format: firstName
        email:
          nullable: false
          type: "string"
          format: email
        id:
          nullable: false
          type: "string"
          format: uuid
        role:
          nullable: true
          type: "array"
          items:
            type: "string"
        createdAt:
          nullable: false
          type: "number"
          format: date-time
    TokenData:
      type: object
      properties:
        userId:
          type: string
          nullable: false
          format: uuid
        email:
          type: string
          format: email
          nullable: false
          example:
            - john@example.com
        token:
          type: string
          nullable: false
    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          # nullable: false
          # minLength: 1
        color:
          nullable: true
          type: string
          example: "#222abb"
          format: color
      required:
        - id
        - name
    Player:
      type: object
      properties:
        id:
          type: string
          nullable: false
          format: uuid
        userId:
          type: string
          format: uuid
        jersey:
          type: integer
        position:
          type: string
        teamId:
          type: string
        lastname:
          nullable: false
          type: string
          format: lastName
          minLength: 1
        firstname:
          nullable: false
          type: string
          format: firstName
          minLength: 1
        avatar:
          type: string
          nullable: true
      required:
        - id
        - userId
        - teamId
        - lastname
        - firstname
    GameTeam:
      allOf:
        - $ref: "#/components/schemas/Team"
        - type: object
          required:
            - score
          properties:
            score:
              type: integer
              format: score
              default: 0
              minimum: 0
              nullable: false

    Game:
      type: object
      properties:
        id:
          type: string
          nullable: true
          format: uuid
        date:
          type: integer
          nullable: true
          format: date-time
        area:
          $ref: "#/components/schemas/Area"
        teams:
          type: "array"
          oneOf:
            - minItems: 2
            - maxItems: 2
          items:
            $ref: "#/components/schemas/GameTeam"
      required:
        - id
        - teams

    ErrorOutput:
      properties:
        status:
          nullable: false
          type: "number"
        message:
          nullable: false
          type: "string"
